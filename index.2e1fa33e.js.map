{"mappings":"AAAA,MAAMA,EAAaC,SAASC,eAAe,eACrCC,EAAcF,SAASG,cAAc,UACrCC,EAAUJ,SAASC,eAAe,WAClCI,EAASL,SAASC,eAAe,UACjCK,EAAUN,SAASG,cAAc,YAIvCI,eAAeC,EAAaC,GAC1B,IACE,MAAMC,QAAiBC,MACrB,2GAA2GF,gCAGvGG,SADaF,EAASG,QACRC,QAEpB,GAAsB,IAAlBF,EAAOG,OAGT,OAFAC,SACAC,IAIF,MAAMC,EAAgBN,EAAOO,KAAIC,GACxBC,QAAQC,IAAI,CAACC,EAAcH,EAAMI,WAAYJ,MAkExDf,EAAOoB,MAAMC,QAAU,OA7DrB,MACMC,SADyBN,QAAQC,IAAIJ,IACQC,KAAI,EAAES,EAAQR,MAC/D,MAAMS,GAAEA,EAAEC,YAAEA,EAAWC,MAAEA,EAAKC,aAAEA,GAAiBZ,EACjD,IAAKY,IAAiBF,GAAiC,IAAlBF,EAAOb,OAC1C,MAAO,GAET,MAAMkB,EAAY,mCAAmCH,IAC/CI,EAAiB,IAAIC,KAAKH,GAAcI,cAG9C,MAAO,gFAE6BP,wDACQI,0DACfF,2CANLH,EAAOS,MAAM,EAAG,GAAGC,KAAK,+CAQnBJ,+CAG5B,IAGHjB,IA8BJ,SAAuBL,GACrBR,EAAQmC,UAAY,GAEpB,MAAMC,EAAS5B,EAAO0B,KAAK,IAE3BlC,EAAQqC,mBAAmB,YAAaD,EAC1C,CAnCIE,CAAcf,GAmDhBrB,EAAQmB,MAAMC,QAAU,MA7CxB,CAJE,MAAOiB,GACPC,QAAQC,IAAIF,EAAMG,YAClB7B,IACAD,GACF,CACF,CAEAT,eAAegB,EAAcwB,GAC3B,IACE,MAAMrC,QAAiBC,MACrB,yGAGIiB,SADalB,EAASG,QACRe,OAOpB,OALmBmB,EAAS5B,KAAI6B,IAC9B,MAAMC,EAAQrB,EAAOsB,MAAKD,GAASA,EAAMpB,KAAOmB,IAChD,OAAOC,EAAQA,EAAME,KAAO,EAAE,IAGdC,QAAOD,GAAiB,KAATA,GAInC,CAHE,MAAOR,GAEP,OADAC,QAAQC,IAAIF,EAAMG,YACX,EACT,CACF,CAcA,SAAS7B,IACPZ,EAAOoB,MAAMC,QAAU,MACzB,CAEA,SAASV,IACPV,EAAQ+C,UAAY,6DACpB/C,EAAQmB,MAAMC,QAAU,OAC1B,CA7FAT,IAmGAlB,EAAWuD,iBAAiB,UAAUC,IACpCA,EAAEC,iBAEFhD,EADcN,EAAYuD,OAE1BvD,EAAYuD,MAAQ,MC5GtB,MAAMC,EAAU,mCACVC,EAAU3D,SAASG,cAAc,aA2BvCI,iBACE,IACE,MAAMG,QAAiBC,MAAM,sDAAsD+C,KAC7EE,QAAalD,EAASG,QA5BhC,SAAuBD,GACrB,MAAM4B,EAAS5B,EACZiD,MAAK,CAACC,EAAYC,IAAgBA,EAAYC,WAAaF,EAAWE,aACtE7C,KAAIC,IACH,MAAMU,YAAEA,EAAWD,GAAEA,EAAEE,MAAEA,EAAKC,aAAEA,EAAYR,UAAEA,GAAcJ,EAG5D,MAAO,qFAEgCS,0FACuCC,2DAChCC,iEACAP,mFAPjC,IAAIW,KAAKH,GAAcI,wFAajC,IAEJE,KAAK,IAERqB,EAAQlB,mBAAmB,aAAcD,EAC3C,EAOIyB,CAAcL,EAAK9C,QAIrB,CAFE,MAAO6B,GACPC,QAAQC,IAAIF,EACd,CACF,CAgBAuB,GAdA3D,iBACE,IACE,MAAMG,QAAiBC,MACrB,yDAAyD+C,KAGrD9B,SADalB,EAASG,QACRe,OACpBgB,QAAQC,IAAIjB,EAId,CAFE,MAAOe,GACPC,QAAQC,IAAIF,EACd,CACF,CAGAwB","sources":["src/js/header.js","src/js/moviesGallery.js"],"sourcesContent":["const searchForm = document.getElementById('search-form');\nconst searchInput = document.querySelector('.input');\nconst gallery = document.getElementById('gallery');\nconst loader = document.getElementById('loader');\nconst notitle = document.querySelector('.notitle');\n\nhideLoader();\n\nasync function searchMovies(query) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/search/movie?api_key=e7c806d7ce9bbdf1ef93bebcabbfe0f1&language=en-US&query=${query}&page=1&include_adult=false`,\n    );\n    const data = await response.json();\n    const movies = data.results;\n\n    if (movies.length === 0) {\n      showNoTitleMessage();\n      hideLoader();\n      return;\n    }\n\n    const moviePromises = movies.map(movie => {\n      return Promise.all([getGenreNames(movie.genre_ids), movie]);\n    });\n\n    showLoader();\n\n    const moviesWithGenres = await Promise.all(moviePromises);\n    const moviesWithGenresFormatted = moviesWithGenres.map(([genres, movie]) => {\n      const { id, poster_path, title, release_date } = movie;\n      if (!release_date || !poster_path || genres.length === 0) {\n        return '';\n      }\n      const posterUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n      const productionYear = new Date(release_date).getFullYear();\n      const genresFormatted = genres.slice(0, 2).join(', ');\n\n      return `\n        <a class=\"gallery__link\">\n          <div class=\"gallery-item\" id=\"${id}\">\n            <img class=\"gallery-item__img\" src=\"${posterUrl}\" loading=\"lazy\" />\n            <p class=\"info-item\">${title}</p>\n            <p class=\"info-item\">${genresFormatted}</p>\n            <p class=\"info-item\">${productionYear}</p>\n          </div>\n        </a>\n      `;\n    });\n\n    hideLoader();\n    renderGallery(moviesWithGenresFormatted);\n    hideNoTitleMessage();\n  } catch (error) {\n    console.log(error.toString());\n    hideLoader();\n    showNoTitleMessage();\n  }\n}\n\nasync function getGenreNames(genreIds) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=e7c806d7ce9bbdf1ef93bebcabbfe0f1&language=en-US`,\n    );\n    const data = await response.json();\n    const genres = data.genres;\n\n    const genreNames = genreIds.map(genreId => {\n      const genre = genres.find(genre => genre.id === genreId);\n      return genre ? genre.name : '';\n    });\n\n    return genreNames.filter(name => name !== '');\n  } catch (error) {\n    console.log(error.toString());\n    return [];\n  }\n}\n\nfunction renderGallery(movies) {\n  gallery.innerHTML = '';\n\n  const markup = movies.join('');\n\n  gallery.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction showLoader() {\n  loader.style.display = 'flex';\n}\n\nfunction hideLoader() {\n  loader.style.display = 'none';\n}\n\nfunction showNoTitleMessage() {\n  notitle.innerText = 'Search result not successful. Enter the correct movie name';\n  notitle.style.display = 'block';\n}\n\nfunction hideNoTitleMessage() {\n  notitle.style.display = 'none';\n}\n\nsearchForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const query = searchInput.value;\n  searchMovies(query);\n  searchInput.value = '';\n});\n","'use strict';\nconst API_KEY = 'e7c806d7ce9bbdf1ef93bebcabbfe0f1';\nconst gallery = document.querySelector('.gallery');\n\nfunction moviesGallery(movies) {\n  const markup = movies\n    .sort((firstMovie, secondMovie) => secondMovie.popularity - firstMovie.popularity)\n    .map(movie => {\n      const { poster_path, id, title, release_date, genre_ids } = movie;\n      const year = new Date(release_date).getFullYear();\n\n      return `\n          <a class=\"gallery__link\">\n            <div class=\"gallery__item\" id=\"${id}\">\n              <img class=\"gallery__item-img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"/>\n              <h4 class=\"gallery__item-header\"><b>${title}</b></h4>\n              <span class=\"gallery__item-info\"><b>${genre_ids}</b></span>\n              \n              <span class=\"gallery__item-info\"><b>${year}</b></span>\n              \n            </div>\n          </a>\n        `;\n    })\n    .join('');\n\n  gallery.insertAdjacentHTML('afterbegin', markup);\n}\n\nasync function fetchMovies() {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`);\n    const data = await response.json();\n\n    moviesGallery(data.results);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchGenre() {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`,\n    );\n    const data = await response.json();\n    const genres = data.genres;\n    console.log(genres);\n    return genres;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfetchMovies();\nfetchGenre();\n"],"names":["$aab16197212dc73e$var$searchForm","document","getElementById","$aab16197212dc73e$var$searchInput","querySelector","$aab16197212dc73e$var$gallery","$aab16197212dc73e$var$loader","$aab16197212dc73e$var$notitle","async","$aab16197212dc73e$var$searchMovies","query","response","fetch","movies","json","results","length","$aab16197212dc73e$var$showNoTitleMessage","$aab16197212dc73e$var$hideLoader","moviePromises","map","movie","Promise","all","$aab16197212dc73e$var$getGenreNames","genre_ids","style","display","moviesWithGenresFormatted","genres","id","poster_path","title","release_date","posterUrl","productionYear","Date","getFullYear","slice","join","innerHTML","markup","insertAdjacentHTML","$aab16197212dc73e$var$renderGallery","error","console","log","toString","genreIds","genreId","genre","find","name","filter","innerText","addEventListener","e","preventDefault","value","$9d6cd42a4b230b34$var$API_KEY","$9d6cd42a4b230b34$var$gallery","data","sort","firstMovie","secondMovie","popularity","$9d6cd42a4b230b34$var$moviesGallery","$9d6cd42a4b230b34$var$fetchMovies","$9d6cd42a4b230b34$var$fetchGenre"],"version":3,"file":"index.2e1fa33e.js.map"}