{"mappings":"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","sources":["src/js/header.js","src/js/moviesGallery.js","src/js/pagination.js","src/js/choose.js"],"sourcesContent":["const searchForm = document.getElementById('search-form');\nconst searchInput = document.querySelector('.input');\nconst gallery = document.getElementById('gallery');\nconst loader = document.getElementById('loader');\nconst notitle = document.querySelector('.notitle');\nconst API_KEY = 'e7c806d7ce9bbdf1ef93bebcabbfe0f1';\nlet genreMap = {};\n\n\n\nhideLoader();\n\nasync function fetchGenres() {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n    const data = await response.json();\n    const genres = data.genres;\n\n    for (const genre of genres) {\n      genreMap[genre.id] = genre.name;\n    }\n  } catch (error) {\n    console.log(error.toString());\n  }\n}\n\nasync function searchMovies(query, page = 1, perPage = 20){\n  try {\n    \n    gallery.innerHTML=\"\"\n    showLoader(); \n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&include_adult=false&page=${page}`);\n    const data = await response.json();\n    const movies = data.results.slice(0,perPage);\n    hideLoader(); \n    renderGallery(movies);\n\n    if (movies.length === 0) {\n      hideLoader();\n      showNoTitleMessage();\n      gallery.innerHTML ='<p class=\"myfriend\"></p>'\n    } else {\n      hideNoTitleMessage();\n    }\n  } catch (error) {\n    console.log(error.toString());\n    hideLoader(); \n    showNoTitleMessage();\n  }\n}\n\n\n\nfunction renderGallery(movies) {\n  gallery.innerHTML = '';\nconst markup = movies.map(movie =>{ \n  const { id, poster_path, title, release_date, genre_ids } = movie;\n\n  if (!release_date || !poster_path || genre_ids.length === 0) {\n    return ''; \n  }\n\n  const posterUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n  const productionYear = new Date(release_date).getFullYear();\n  const genresFormatted = genre_ids\n  .map(genreId => genreMap[genreId])\n  .slice(0, 2)\n  .join(', ');\n\n  return `\n  <a class=\"gallery__link\">\n  <div class=\"gallery__item\" id=\"${id}\">\n    <img class=\"gallery__item-img\" src=\"${posterUrl}\" loading=\"lazy\" />\n    <h4 class=\"gallery__item-header\">${title}</h4>\n    <span class=\"gallery__item-info\">${genresFormatted}</span>\n    <span class=\"gallery__item-info\">${productionYear}</span>\n  </div>\n</a>\n  `;\n}).join(\"\")\n\n  gallery.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction showLoader() {\n  loader.style.display = 'flex';\n}\n\nfunction hideLoader() {\n  loader.style.display = 'none';\n}\n\nfunction showNoTitleMessage() {\n  notitle.innerText = 'Search result not successful. Enter the correct movie name.';\n  notitle.style.display = 'block';\n}\n\nfunction hideNoTitleMessage() {\n  notitle.style.display = 'none';\n}\n\nsearchForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const query = searchInput.value;\n  searchMovies(query);\n  searchInput.value = '';\n});\n\n  fetchGenres();\n\n\nexport {showNoTitleMessage};\nexport {showLoader};\nexport {hideLoader};\nexport {fetchGenres};\nexport {renderGallery};\nexport {hideNoTitleMessage};\nexport {searchMovies};","'use strict';\nconst API_KEY = 'e7c806d7ce9bbdf1ef93bebcabbfe0f1';\nconst gallery = document.querySelector('.gallery');\nfunction moviesGallery(movies, genres) {\n  gallery.innerHTML = '';\n  const markup = movies\n    .sort((firstMovie, secondMovie) => secondMovie.popularity - firstMovie.popularity)\n    .map(movie => {\n      const { poster_path, id, title, release_date, genre_ids } = movie;\n      const year = new Date(release_date).getFullYear();\n      const movieGenres = genres\n        .filter(genre => genre_ids.includes(genre.id))\n        .map(genre => genre.name)\n        .join(', ');\n      return `\n <a class=\"gallery__link\">\n <div class=\"gallery__item\" id=\"${id}\">\n <img class=\"gallery__item-img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"/>\n <h4 class=\"gallery__item-header\">${title}</h4>\n <span class=\"gallery__item-info\">${movieGenres}</span>\n <span class=\"gallery__item-info\">${year}</span>\n </div>\n </a>\n `;\n    })\n    .join('');\n  gallery.insertAdjacentHTML('afterbegin', markup);\n}\nexport async function fetchMovies(pageNum) {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}&page=${pageNum}`,\n    );\n    const data = await response.json();\n    const genres = await fetchGenre();\n    moviesGallery(data.results, genres);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\nfetchMovies();\nasync function fetchGenre() {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`,\n    );\n    const data = await response.json();\n    const genres = data.genres;\n    return genres;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nconst btnUp = document.querySelector('.btnUp');\nbtnUp.style.display = 'none';\nwindow.onscroll = function () {\n  scrollFunction();\n};\nfunction scrollFunction() {\n  if (document.documentElement.scrollTop > 200) {\n    btnUp.style.display = 'block';\n  } else {\n    btnUp.style.display = 'none';\n  }\n  btnUp.addEventListener('click', scrollToTop);\n}\nfunction scrollToTop() {\n  window.scrollTo({ top: 0, behavior: 'smooth' });\n}\n","'use strict';\r\n\r\nimport { fetchMovies } from './moviesGallery';\r\nconst ulTag = document.querySelector('.pagination ul');\r\nconst moviesContainer = document.querySelector('.gallery');\r\nconst paginationContainer = document.querySelector('.pagination');\r\nconst MOVIES_API_URL = 'https://api.themoviedb.org/3/movie/popular';\r\nconst APIKey = 'e7c806d7ce9bbdf1ef93bebcabbfe0f1';\r\nconst defaultMoviesURL =\r\n  'https://api.themoviedb.org/3/trending/movie/week?api_key=e7c806d7ce9bbdf1ef93bebcabbfe0f1';\r\nlet totalPages;\r\n// async function fetchMovies(page) {\r\n//   try {\r\n//     const response = await fetch(`${MOVIES_API_URL}?api_key=${APIKey}&page=${page}`);\r\n//     const data = await response.json();\r\n//     paginationBtns(data.total_pages, page);\r\n//     return data;\r\n//   } catch (error) {\r\n//     console.log(error.toString());\r\n//   }\r\n// }\r\n// function buildUpGallery() {\r\n//   fetchMovies(1);\r\n//   paginationBtns(data.total_pages, page);\r\n// }\r\n// totalPages = 20;\r\n// paginationBtns(totalPages, 1);\r\nconst BuildGallery = async page => {\r\n  data = await fetchMovies(page, paginationContainer);\r\n  // totalPages = data.total_pages;\r\n  totalPages = 500;\r\n  paginationBtns(totalPages, page);\r\n};\r\nBuildGallery(1);\r\nasync function searchMovies(page) {\r\n  try {\r\n    const searchText = document.querySelector('input[name=\"search\"]').value;\r\n    const response = await fetch(\r\n      `https://api.themoviedb.org/3/search/movie?api_key=${APIKey}&query=${searchText}&page=${page}`,\r\n    );\r\n    return response.json();\r\n  } catch (error) {\r\n    console.error(error.toString());\r\n  }\r\n}\r\nfunction paginationBtns(total_pages, page) {\r\n  let pageLimit = 500;\r\n  let liTag = '';\r\n  let activeLi;\r\n  let beforePages = page - 1;\r\n  let afterPages = page + 1;\r\n  if (pageLimit)\r\n    if (page > 1) {\r\n      liTag += `<li class=\"btn prev\" onclick=\"paginationClick(${total_pages}, ${\r\n        page - 1\r\n      })\"><span class=\"arrow prev-arrow\">&#129128;</span></li>`;\r\n    }\r\n  if (page > 2) {\r\n    liTag += `<li class=\"pageNumber\" onclick=\"paginationClick(${total_pages}, 1)\"><span>1</span></li>`;\r\n    if (page > 3) {\r\n      liTag += `<li class=\"dots\"><span>&#8226;&#8226;&#8226;</span></li>`;\r\n    }\r\n  }\r\n  if (page === total_pages) {\r\n    beforePages = beforePages - 4;\r\n  } else if (page === total_pages - 1) {\r\n    beforePages = beforePages - 1;\r\n  } else if (page === total_pages - 2) {\r\n    afterPages = afterPages - 1;\r\n  }\r\n  if (page === 1) {\r\n    afterPages = afterPages + 4;\r\n  } else if (page === 2) {\r\n    afterPages = afterPages + 1;\r\n  } else if (page === 3) {\r\n    beforePages = beforePages + 1;\r\n  }\r\n  for (let pageLength = beforePages - 1; pageLength <= afterPages + 1; pageLength++) {\r\n    if (pageLength < 0) {\r\n      continue;\r\n\r\n    }\r\n    if (pageLength > total_pages || pageLength > total_pages + 1) {\r\n      continue;\r\n    }\r\n    if (pageLength === 0) {\r\n      pageLength = pageLength + 1;\r\n    }\r\n    if (page === pageLength) {\r\n      activeLi = 'active';\r\n    } else {\r\n      activeLi = '';\r\n    }\r\n    liTag += `<li class=\"pageNumber ${activeLi}\" onclick=\"paginationClick(${total_pages}, ${pageLength})\"><span>${pageLength}</span></li>`;\r\n  }\r\n  if (page < total_pages - 1) {\r\n    if (page < total_pages - 2) {\r\n      liTag += `<li class=\"dots\"><span>&#8226;&#8226;&#8226;</span></li>`;\r\n    }\r\n    liTag += `<li class=\"pageNumber\" onclick=\"paginationClick(${total_pages}, ${total_pages})\"><span>${total_pages}</span></li>`;\r\n  }\r\n  if (page < total_pages) {\r\n    liTag += `<li class=\"btn next\" onclick=\"paginationClick(${total_pages}, ${\r\n      page + 1\r\n    })\"><span class=\"arrow next-arrow\">&#129130;</span></li>`;\r\n  }\r\n  ulTag.innerHTML = liTag;\r\n}\r\nwindow.paginationClick = function (total_pages, page) {\r\n  paginationBtns(total_pages, page);\r\n  BuildGallery(page);\r\n};\r\npaginationContainer.addEventListener('click', e => {\r\n  if (e.target.localName === 'li' || e.target.localName === 'span') {\r\n    clearPageContent();\r\n    if (searchText === '') {\r\n      const URLBuild = defaultMoviesURL + '&page=' + e.target.textContent;\r\n      getDataFromAPI(URLBuild);\r\n    } else {\r\n      const URLBuild =\r\n        MOVIES_API_URL +\r\n        '?api_key=' +\r\n        APIKey +\r\n        '&query=' +\r\n        searchText +\r\n        '&page=' +\r\n        e.target.textContent;\r\n      console.log(URLBuild);\r\n      getDataFromAPI(URLBuild);\r\n    }\r\n  }\r\n});\r\nconst clearPageContent = () => {\r\n  moviesContainer.innerHTML = '';\r\n};\r\nasync function getDataFromAPI(url) {\r\n  try {\r\n    const response = await fetch(url);\r\n    const data = await response.json();\r\n    // Process the received data here\r\n  } catch (error) {\r\n    console.log(error.toString());\r\n  }\r\n}\r\n","import { showLoader } from \"./header\";\nimport { hideLoader } from \"./header\";\nimport { hideNoTitleMessage } from \"./header\";\n\n\n\nasync function fetchGenre() {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`,\n    );\n    const data = await response.json();\n    const genres = data.genres;\n    return genres;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\n\nconst gallery = document.querySelector('.gallery');\n\nconst genreSelect = document.querySelector('.genre');\n\nconst API_KEY = '6fc014c055bacb8460b83603c43b9093'\n\nlet genre = '';\n\ngenreSelect.addEventListener('change', handleGenreChange);\n\nfunction handleGenreChange(event) {\n  gallery.innerHTML='';\nhideNoTitleMessage();\ngenre = event.target.value;\nfetchMoviesByGenre(genre);\n// console.log(selectedGenre);\n}\n\nasync function fetchMoviesByGenre(number) {\n  function getGenreId(genre) {\n    const genreMap = {\n      Action: 28,\n      Adventure: 12,\n      Animation: 16,\n      Comedy: 35,\n      Crime: 80,\n      Documentary: 99,\n      Drama: 18,\n      Family: 10751,\n      Fantasy: 14,\n      History: 36,\n      Horror: 27,\n      Music: 10402,\n      Mystery: 9648,\n      Romance: 10749,\n      'Science Fiction': 878,\n      'TV Movie': 10770,\n      Thriller: 53,\n      War: 10752,\n      Western: 37\n    };\n    return genreMap[genre];\n  }\n  try {\n    showLoader();\n    const genreId = getGenreId(genre);\n    const response = await fetch(`https://api.themoviedb.org/3/discover/movie?api_key=${API_KEY}&with_genres=${genreId}&page=${number}`);\n    const data = await response.json();\n    const genres = await fetchGenre();\n    const slajs = data.results.slice(0,20);\n    moviesGallery(slajs, genres);\n    hideLoader()\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfunction getGenreId(genre) {\n  const genreMap = {\n    Action: 28,\n    Adventure: 12,\n    Animation: 16,\n    Comedy: 35,\n    Crime: 80,\n    Documentary: 99,\n    Drama: 18,\n    Family: 10751,\n    Fantasy: 14,\n    History: 36,\n    Horror: 27,\n    Music: 10402,\n    Mystery: 9648,\n    Romance: 10749,\n    'Science Fiction': 878,\n    'TV Movie': 10770,\n    Thriller: 53,\n    War: 10752,\n    Western: 37\n  };\n  return genreMap[genre];\n}\n\nlet currentPage = 1;\nconst moviesPerPage = 20;\n\nfunction moviesGallery(movies, genres) {\n\n  const markup = movies\n  .sort((firstMovie, secondMovie) => secondMovie.popularity - firstMovie.popularity)\n  .map(movie => {\n    const { poster_path, id, title, release_date, genre_ids } = movie;\n    const year = new Date(release_date).getFullYear();\n\n    const movieGenres = genres\n      .filter(genre => genre_ids.includes(genre.id))\n      .map(genre => genre.name)\n      .join(', ');\n\n    return `\n        <a class=\"gallery__link\">\n          <div class=\"gallery__item\" id=\"${id}\">\n            <img class=\"gallery__item-img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"/>\n            <h4 class=\"gallery__item-header\">${title}</h4>\n            <span class=\"gallery__item-info\">${movieGenres}</span>\n            \n            <span class=\"gallery__item-info\">${year}</span>\n            \n          </div>\n        </a>\n      `;\n  })\n  .join('');\n\ngallery.insertAdjacentHTML('afterbegin', markup);\n\n\n}\n\nexport {fetchMoviesByGenre , handleGenreChange};"],"names":["$aab16197212dc73e$var$searchForm","document","getElementById","$aab16197212dc73e$var$searchInput","querySelector","$aab16197212dc73e$var$gallery","$aab16197212dc73e$var$loader","$aab16197212dc73e$var$notitle","$aab16197212dc73e$var$API_KEY","$aab16197212dc73e$var$genreMap","async","$aab16197212dc73e$export$b0c4d3ac9887d994","query","page","perPage","innerHTML","$aab16197212dc73e$export$56525cbb1fcd885c","response","fetch","movies","json","results","slice","$aab16197212dc73e$export$5cee2c2772922923","markup","map","movie","id","poster_path","title","release_date","genre_ids","length","posterUrl","productionYear","Date","getFullYear","genreId","join","insertAdjacentHTML","$aab16197212dc73e$export$30b0ee8bdb5cac31","$aab16197212dc73e$export$7d17a3ac1355122c","$aab16197212dc73e$export$afebd51aa95050a7","error","console","log","toString","style","display","innerText","addEventListener","e","preventDefault","value","genres","genre","name","$aab16197212dc73e$export$e95d448b93b2cdb","$9d6cd42a4b230b34$var$API_KEY","$9d6cd42a4b230b34$var$gallery","$9d6cd42a4b230b34$export$88181abcadffafee","pageNum","data","$9d6cd42a4b230b34$var$fetchGenre","sort","firstMovie","secondMovie","popularity","year","filter","includes","$9d6cd42a4b230b34$var$moviesGallery","$9d6cd42a4b230b34$var$btnUp","$9d6cd42a4b230b34$var$scrollToTop","window","scrollTo","top","behavior","onscroll","documentElement","scrollTop","$9d6cd42a4b230b34$var$scrollFunction","$baa48fd5a30d32e8$var$ulTag","$baa48fd5a30d32e8$var$moviesContainer","$baa48fd5a30d32e8$var$paginationContainer","$baa48fd5a30d32e8$var$APIKey","$baa48fd5a30d32e8$var$totalPages","$baa48fd5a30d32e8$var$BuildGallery","$baa48fd5a30d32e8$var$paginationBtns","total_pages","activeLi","liTag","beforePages","afterPages","pageLength","paginationClick","target","localName","$baa48fd5a30d32e8$var$clearPageContent","searchText","$baa48fd5a30d32e8$var$getDataFromAPI","$baa48fd5a30d32e8$var$defaultMoviesURL","textContent","URLBuild","$baa48fd5a30d32e8$var$MOVIES_API_URL","url","$c125a08da72f7f81$var$gallery","$c125a08da72f7f81$var$genreSelect","$c125a08da72f7f81$var$API_KEY","$c125a08da72f7f81$var$genre","event","number","getGenreId","Action","Adventure","Animation","Comedy","Crime","Documentary","Drama","Family","Fantasy","History","Horror","Music","Mystery","Romance","Thriller","War","Western","$c125a08da72f7f81$var$fetchGenre","$c125a08da72f7f81$var$moviesGallery","$c125a08da72f7f81$export$e4bb840dce7a48f9"],"version":3,"file":"index.2228543c.js.map"}