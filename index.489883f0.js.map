{"mappings":"AAAA,MAAMA,EAAaC,SAASC,eAAe,eACrCC,EAAcF,SAASG,cAAc,UACrCC,EAAUJ,SAASC,eAAe,WAClCI,EAASL,SAASC,eAAe,UACjCK,EAAUN,SAASG,cAAc,YACjCI,EAAU,mCAChB,IAAIC,EAAW,CAAC,EAmBhBC,eAAeC,EAAaC,GAC1B,IAuDAN,EAAOO,MAAMC,QAAU,OArDrB,MAAMC,QAAiBC,MAAM,qDAAqDR,0BAAgCI,gCAE5GK,SADaF,EAASG,QACRC,QACpBC,IAkBJ,SAAuBH,GACrBZ,EAAQgB,UAAY,GACtB,MAAMC,EAASL,EAAOM,KAAIC,IACxB,MAAMC,GAAEA,EAAEC,YAAEA,EAAWC,MAAEA,EAAKC,aAAEA,EAAYC,UAAEA,GAAcL,EAE5D,IAAKI,IAAiBF,GAAoC,IAArBG,EAAUC,OAC7C,MAAO,GAGT,MAAMC,EAAY,mCAAmCL,IAC/CM,EAAiB,IAAIC,KAAKL,GAAcM,cAM9C,MAAO,wEAE6BT,oDACQM,sDACfJ,uCATLE,EACvBN,KAAIY,GAAW1B,EAAS0B,KACxBC,MAAM,EAAG,GACTC,KAAK,2CAQuBL,mCAG5B,IACAK,KAAK,IAENhC,EAAQiC,mBAAmB,YAAahB,EAC1C,CA9CIiB,CAActB,GAEQ,IAAlBA,EAAOa,QACTV,IACAoB,KA0DJjC,EAAQM,MAAMC,QAAU,MAlDxB,CAJE,MAAO2B,GACPC,QAAQC,IAAIF,EAAMG,YAClBxB,IACAoB,GACF,CACF,CAuCA,SAASpB,IACPd,EAAOO,MAAMC,QAAU,MACzB,CAEA,SAAS0B,IACPjC,EAAQsC,UAAY,8DACpBtC,EAAQM,MAAMC,QAAU,OAC1B,CAlFAM,IAwFApB,EAAW8C,iBAAiB,UAAUC,IACpCA,EAAEC,iBAEFrC,EADcR,EAAY8C,OAE1B9C,EAAY8C,MAAQ,MA1FtBvC,iBACE,IACE,MAAMK,QAAiBC,MAAM,yDAAyDR,oBAEhF0C,SADanC,EAASG,QACRgC,OAEpB,IAAK,MAAMC,KAASD,EAClBzC,EAAS0C,EAAM1B,IAAM0B,EAAMC,IAI/B,CAFE,MAAOX,GACPC,QAAQC,IAAIF,EAAMG,WACpB,CACF,CAiFAS,GCvGA,MAAMC,EAAU,mCACVC,EAAUtD,SAASG,cAAc,aAgCvCM,iBACE,IACE,MAAMK,QAAiBC,MAAM,sDAAsDsC,KAC7EE,QAAazC,EAASG,OACtBgC,QAQVxC,iBACE,IACE,MAAMK,QAAiBC,MACrB,yDAAyDsC,KAErDE,QAAazC,EAASG,OAE5B,OADesC,EAAKN,MAItB,CAFE,MAAOT,GACPC,QAAQC,IAAIF,EACd,CACF,CAnByBgB,IAlCzB,SAAuBxC,EAAQiC,GAC7B,MAAM5B,EAASL,EACZyC,MAAK,CAACC,EAAYC,IAAgBA,EAAYC,WAAaF,EAAWE,aACtEtC,KAAIC,IACH,MAAME,YAAEA,EAAWD,GAAEA,EAAEE,MAAEA,EAAKC,aAAEA,EAAYC,UAAEA,GAAcL,EACtDsC,EAAO,IAAI7B,KAAKL,GAAcM,cAOpC,MAAO,qFAEgCT,0FACuCC,wDACnCC,0DATvBuB,EACjBa,QAAOZ,GAAStB,EAAUmC,SAASb,EAAM1B,MACzCF,KAAI4B,GAASA,EAAMC,OACnBf,KAAK,gFASmCyB,wEAIxC,IAEJzB,KAAK,IAERkB,EAAQjB,mBAAmB,aAAchB,EAC3C,EAOI2C,CAAcT,EAAKrC,QAAS+B,EAI9B,CAFE,MAAOT,GACPC,QAAQC,IAAIF,EACd,CACF,CAeAyB","sources":["src/js/header.js","src/js/moviesGallery.js"],"sourcesContent":["const searchForm = document.getElementById('search-form');\nconst searchInput = document.querySelector('.input');\nconst gallery = document.getElementById('gallery');\nconst loader = document.getElementById('loader');\nconst notitle = document.querySelector('.notitle');\nconst API_KEY = 'e7c806d7ce9bbdf1ef93bebcabbfe0f1';\nlet genreMap = {};\n\n\nhideLoader();\n\nasync function fetchGenres() {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}&language=en-US`);\n    const data = await response.json();\n    const genres = data.genres;\n\n    for (const genre of genres) {\n      genreMap[genre.id] = genre.name;\n    }\n  } catch (error) {\n    console.log(error.toString());\n  }\n}\n\nasync function searchMovies(query) {\n  try {\n    showLoader(); \n    const response = await fetch(`https://api.themoviedb.org/3/search/movie?api_key=${API_KEY}&language=en-US&query=${query}&page=1&include_adult=false`);\n    const data = await response.json();\n    const movies = data.results;\n    hideLoader(); \n    renderGallery(movies);\n\n    if (movies.length === 0) {\n      hideLoader();\n      showNoTitleMessage();\n    } else {\n      hideNoTitleMessage();\n    }\n  } catch (error) {\n    console.log(error.toString());\n    hideLoader(); \n    showNoTitleMessage();\n  }\n}\n\n\n\nfunction renderGallery(movies) {\n  gallery.innerHTML = '';\nconst markup = movies.map(movie =>{ \n  const { id, poster_path, title, release_date, genre_ids } = movie;\n\n  if (!release_date || !poster_path || genre_ids.length === 0) {\n    return ''; \n  }\n\n  const posterUrl = `https://image.tmdb.org/t/p/w500/${poster_path}`;\n  const productionYear = new Date(release_date).getFullYear();\n  const genresFormatted = genre_ids\n  .map(genreId => genreMap[genreId])\n  .slice(0, 2)\n  .join(', ');\n\n  return `\n    <a class=\"gallery__link\">\n      <div class=\"gallery-item\" id=\"${id}\">\n        <img class=\"gallery-item__img\" src=\"${posterUrl}\" loading=\"lazy\" />\n        <p class=\"info-item\">${title}</p>\n        <p class=\"info-item\">${genresFormatted}</p>\n        <p class=\"info-item\">${productionYear}</p>\n      </div>\n    </a>\n  `;\n}).join(\"\")\n\n  gallery.insertAdjacentHTML('beforeend', markup);\n}\n\nfunction showLoader() {\n  loader.style.display = 'flex';\n}\n\nfunction hideLoader() {\n  loader.style.display = 'none';\n}\n\nfunction showNoTitleMessage() {\n  notitle.innerText = 'Search result not successful. Enter the correct movie name.';\n  notitle.style.display = 'block';\n}\n\nfunction hideNoTitleMessage() {\n  notitle.style.display = 'none';\n}\n\nsearchForm.addEventListener('submit', e => {\n  e.preventDefault();\n  const query = searchInput.value;\n  searchMovies(query);\n  searchInput.value = '';\n});\n\nfetchGenres();\n","'use strict';\nconst API_KEY = 'e7c806d7ce9bbdf1ef93bebcabbfe0f1';\nconst gallery = document.querySelector('.gallery');\n\nfunction moviesGallery(movies, genres) {\n  const markup = movies\n    .sort((firstMovie, secondMovie) => secondMovie.popularity - firstMovie.popularity)\n    .map(movie => {\n      const { poster_path, id, title, release_date, genre_ids } = movie;\n      const year = new Date(release_date).getFullYear();\n\n      const movieGenres = genres\n        .filter(genre => genre_ids.includes(genre.id))\n        .map(genre => genre.name)\n        .join(', ');\n\n      return `\n          <a class=\"gallery__link\">\n            <div class=\"gallery__item\" id=\"${id}\">\n              <img class=\"gallery__item-img\" src=\"https://image.tmdb.org/t/p/w500/${poster_path}\"/>\n              <h4 class=\"gallery__item-header\">${title}</h4>\n              <span class=\"gallery__item-info\">${movieGenres}</span>\n              \n              <span class=\"gallery__item-info\">${year}</span>\n              \n            </div>\n          </a>\n        `;\n    })\n    .join('');\n\n  gallery.insertAdjacentHTML('afterbegin', markup);\n}\n\nasync function fetchMovies() {\n  try {\n    const response = await fetch(`https://api.themoviedb.org/3/movie/popular?api_key=${API_KEY}`);\n    const data = await response.json();\n    const genres = await fetchGenre();\n    moviesGallery(data.results, genres);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nasync function fetchGenre() {\n  try {\n    const response = await fetch(\n      `https://api.themoviedb.org/3/genre/movie/list?api_key=${API_KEY}`,\n    );\n    const data = await response.json();\n    const genres = data.genres;\n    return genres;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nfetchMovies();\n"],"names":["$aab16197212dc73e$var$searchForm","document","getElementById","$aab16197212dc73e$var$searchInput","querySelector","$aab16197212dc73e$var$gallery","$aab16197212dc73e$var$loader","$aab16197212dc73e$var$notitle","$aab16197212dc73e$var$API_KEY","$aab16197212dc73e$var$genreMap","async","$aab16197212dc73e$var$searchMovies","query","style","display","response","fetch","movies","json","results","$aab16197212dc73e$var$hideLoader","innerHTML","markup","map","movie","id","poster_path","title","release_date","genre_ids","length","posterUrl","productionYear","Date","getFullYear","genreId","slice","join","insertAdjacentHTML","$aab16197212dc73e$var$renderGallery","$aab16197212dc73e$var$showNoTitleMessage","error","console","log","toString","innerText","addEventListener","e","preventDefault","value","genres","genre","name","$aab16197212dc73e$var$fetchGenres","$9d6cd42a4b230b34$var$API_KEY","$9d6cd42a4b230b34$var$gallery","data","$9d6cd42a4b230b34$var$fetchGenre","sort","firstMovie","secondMovie","popularity","year","filter","includes","$9d6cd42a4b230b34$var$moviesGallery","$9d6cd42a4b230b34$var$fetchMovies"],"version":3,"file":"index.489883f0.js.map"}